{"0": {"response": "Here are 21 examples of sorting in Python using the built-in `sorted()` function and the `list.sort()` method. I've included various data types, edge cases, and custom sorting examples.\n\n1. **Sorting a list of integers:**\n\n```python\nnumbers = [6, 9, 3, 1, 5]\nsorted_numbers = sorted(numbers)\nprint(sorted_numbers)  # Output: [1, 3, 5, 6, 9]\n```\n\n2. **Sorting a list of floats:**\n\n```python\nfloats = [3.14, 1.23, 2.71, 0.54]\nsorted_floats = sorted(floats)\nprint(sorted_floats)  # Output: [0.54, 1.23, 2.71, 3.14]\n```\n\n3. **Sorting a list of strings:**\n\n```python\nwords = [\"apple\", \"banana\", \"cherry\", \"date\"]\nsorted_words = sorted(words)\nprint(sorted_words)  # Output: ['apple', 'banana', 'cherry', 'date']\n```\n\n4. **Sorting a list of mixed data types (raises TypeError):**\n\n```python\nmixed = [1, \"two\", 3.0, \"four\"]\nsorted_mixed = sorted(mixed)  # Raises TypeError\n```\n\n5. **Sorting a list of tuples by the first element:**\n\n```python\ntuples = [(3, 6), (1, 2), (4, 5)]\nsorted_tuples = sorted(tuples)\nprint(sorted_tuples)  # Output: [(1, 2), (3, 6), (4, 5)]\n```\n\n6. **Sorting a list of tuples by the second element:**\n\n```python\nsorted_tuples_by_second = sorted(tuples, key=lambda x: x[1])\nprint(sorted_tuples_by_second)  # Output: [(3, 6), (1, 2), (4, 5)]\n```\n\n7. **Sorting a list of dictionaries by a specific key:**\n\n```python\ndicts = [{'name': 'John', 'age': 30}, {'name': 'Jane', 'age': 25}]\nsorted_dicts = sorted(dicts, key=lambda x: x['age'])\nprint(sorted_dicts)  # Output: [{'name': 'Jane', 'age': 25}, {'name': 'John', 'age': 30}]\n```\n\n8. **Sorting a list of objects by a specific attribute:**\n\n```python\nclass Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def __repr__(self):\n        return f\"{self.name} ({self.age})\"\n\npeople = [Person('John', 30), Person('Jane', 25)]\nsorted_people = sorted(people, key=lambda x: x.age)\nprint(sorted_people)  # Output: [Jane (25), John (30)]\n```\n\n9. **Sorting a list in descending order:**\n\n```python\nnumbers = [6, 9, 3, 1, 5]\nsorted_numbers_desc = sorted(numbers, reverse=True)\nprint(sorted_numbers_desc)  # Output: [9, 6, 5, 3, 1]\n```\n\n10. **Sorting a list using the `list.sort()` method:**\n\n```python\nnumbers = [6, 9, 3, 1, 5]\nnumbers.sort()\nprint(numbers)  # Output: [1, 3, 5, 6, 9]\n```\n\n11. **Sorting a list in descending order using the `list.sort()` method:**\n\n```python\nnumbers = [6, 9, 3, 1, 5]\nnumbers.sort(reverse=True)\nprint(numbers)  # Output: [9, 6, 5, 3, 1]\n```\n\n12. **Sorting a list of strings ignoring case:**\n\n```python\nwords = [\"Apple\", \"banana\", \"Cherry\", \"date\"]\nsorted_words_ignore_case = sorted(words, key=str.lower)\nprint(sorted_words_ignore_case)  # Output: ['Apple', 'banana', 'Cherry', 'date']\n```\n\n13. **Sorting a list of strings by length:**\n\n```python\nwords = [\"apple\", \"banana\", \"cherry\", \"date\"]\nsorted_words_by_length = sorted(words, key=len)\nprint(sorted_words_by_length)  # Output: ['date', 'apple', 'cherry', 'banana']\n```\n\n14. **Sorting a list of strings by their last letter:**\n\n```python\nwords = [\"apple\", \"banana\", \"cherry\", \"date\"]\nsorted_words_by_last_letter = sorted(words, key=lambda x: x[-1])\nprint(sorted_words_by_last_letter)  # Output: ['date', 'apple', 'banana', 'cherry']\n```\n\n15. **Sorting a list of strings using a custom comparison function:**\n\n```python\ndef custom_sort(word):\n    return word[::-1]  # Reverse the word for sorting\n\nwords = [\"apple\", \"banana\", \"cherry\", \"date\"]\nsorted_words_custom = sorted(words, key=custom_sort)\nprint(sorted_words_custom)  # Output: ['banana', 'cherry', 'date', 'apple']\n```\n\n16. **Sorting a list of strings using the `locale` module for natural sorting:**\n\n```python\nimport locale\n\nwords = [\"file1.txt\", \"file10.txt\", \"file2.txt\", \"file9.txt\"]\nlocale.setlocale(locale.LC_ALL, 'en_US.UTF-8')\nsorted_words_natural = sorted(words, key=locale.strxfrm)\nprint(sorted_words_natural)  # Output: ['file1.txt', 'file2.txt', 'file9.txt', 'file10.txt']\n```\n\n17. **Sorting a list of strings using the `humanize` library for natural sorting:**\n\n```python\nfrom humanize import intcomma\n\nwords = [\"1 file.txt\", \"10 file.txt\", \"2 file.txt\", \"9 file.txt\"]\nsorted_words_natural = sorted(words, key=lambda x: int(intcomma(x.split()[0])))\nprint(sorted_words_natural)  # Output: ['1 file.txt', '2 file.txt', '9 file.txt', '10 file.txt']\n```\n\n18. **Sorting a list of strings using the `natural` function from the `naturalsort` library:**\n\n```python\nfrom natsort import natsorted\n\nwords = [\"file1.txt\", \"file10.txt\", \"file2.txt\", \"file9.txt\"]\nsorted_words_natural = natsorted(words)\nprint(sorted_words_natural)  # Output: ['file1.txt', 'file2.txt', 'file9.txt', 'file10.txt']\n```\n\n19. **Sorting a list of strings using the `natural_sort` function from the `humanfriendly` library:**\n\n```python\nfrom humanfriendly import natural_sort\n\nwords = [\"file1.txt\", \"file10.txt\", \"file2.txt\", \"file9.txt\"]\nsorted_words_natural = natural_sort(words)\nprint(sorted_words_natural)  # Output: ['file1.txt', 'file2.txt', 'file9.txt', 'file10.txt']\n```\n\n20. **Sorting a list of strings using the `natural` function from the `natural` library:**\n\n```python\nfrom natural import natural\n\nwords = [\"file1.txt\", \"file10.txt\", \"file2.txt\", \"file9.txt\"]\nsorted_words_natural = sorted(words, key=natural)\nprint(sorted_words_natural)  # Output: ['file1.txt', 'file2.txt', 'file9.txt', 'file10.txt']\n```\n\n21. **Sorting a list of strings using the `natsort` function from the `natsort` library (alternative to `natsorted`):**\n\n```python\nfrom natsort import natsort\n\nwords = [\"file1.txt\", \"file10.txt\", \"file2.txt\", \"file9.txt\"]\nsorted_words_natural = natsort(words)\nprint(sorted_words_natural)  # Output: ['file1.txt', 'file2.txt', 'file9.txt', 'file10.txt']\n```\n\nThese examples demonstrate various ways to sort data in Python, including custom sorting, natural sorting, and sorting with specific comparison functions.", "token_count": 1850, "response_time": 58.70185820000006}, "1": {"response": "Sure, I'd be happy to provide 21 examples of sorting in Python using the built-in `sorted()` function and the `list.sort()` method. I'll include sorting in ascending and descending order, sorting with a custom key, sorting lists of lists, and sorting with complex data types.\n\n1. **Sorting a list of integers in ascending order:**\n\n```python\nnumbers = [6, 9, 3, 1, 5]\nsorted_numbers = sorted(numbers)\nprint(sorted_numbers)  # Output: [1, 3, 5, 6, 9]\n```\n\n2. **Sorting a list of integers in descending order:**\n\n```python\nnumbers = [6, 9, 3, 1, 5]\nsorted_numbers = sorted(numbers, reverse=True)\nprint(sorted_numbers)  # Output: [9, 6, 5, 3, 1]\n```\n\n3. **Sorting a list of strings in alphabetical order:**\n\n```python\nwords = [\"banana\", \"apple\", \"cherry\", \"date\"]\nsorted_words = sorted(words)\nprint(sorted_words)  # Output: ['apple', 'banana', 'cherry', 'date']\n```\n\n4. **Sorting a list of strings in reverse alphabetical order:**\n\n```python\nwords = [\"banana\", \"apple\", \"cherry\", \"date\"]\nsorted_words = sorted(words, reverse=True)\nprint(sorted_words)  # Output: ['date', 'cherry', 'banana', 'apple']\n```\n\n5. **Sorting a list of tuples by the first element:**\n\n```python\npoints = [(3, 7), (1, 3), (5, 2), (4, 6)]\nsorted_points = sorted(points)\nprint(sorted_points)  # Output: [(1, 3), (2, 5), (3, 7), (4, 6)]\n```\n\n6. **Sorting a list of tuples by the second element:**\n\n```python\npoints = [(3, 7), (1, 3), (5, 2), (4, 6)]\nsorted_points = sorted(points, key=lambda x: x[1])\nprint(sorted_points)  # Output: [(5, 2), (1, 3), (3, 7), (4, 6)]\n```\n\n7. **Sorting a list of lists by the first element of the inner list:**\n\n```python\nlists = [[3, 7], [1, 3], [5, 2], [4, 6]]\nsorted_lists = sorted(lists)\nprint(sorted_lists)  # Output: [[1, 3], [3, 7], [4, 6], [5, 2]]\n```\n\n8. **Sorting a list of lists by the second element of the inner list:**\n\n```python\nlists = [[3, 7], [1, 3], [5, 2], [4, 6]]\nsorted_lists = sorted(lists, key=lambda x: x[1])\nprint(sorted_lists)  # Output: [[5, 2], [1, 3], [3, 7], [4, 6]]\n```\n\n9. **Sorting a list of objects by a custom attribute:**\n\n```python\nclass Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def __repr__(self):\n        return f\"{self.name} ({self.age})\"\n\npeople = [Person(\"Alice\", 30), Person(\"Bob\", 25), Person(\"Charlie\", 35)]\nsorted_people = sorted(people, key=lambda x: x.age)\nprint(sorted_people)\n```\n\n10. **Sorting a list of objects by a custom attribute in descending order:**\n\n```python\nsorted_people = sorted(people, key=lambda x: x.age, reverse=True)\nprint(sorted_people)\n```\n\n11. **Sorting a list of strings using a custom key (length of the string):**\n\n```python\nwords = [\"banana\", \"apple\", \"cherry\", \"date\"]\nsorted_words = sorted(words, key=len)\nprint(sorted_words)  # Output: ['date', 'apple', 'cherry', 'banana']\n```\n\n12. **Sorting a list of strings using a custom key (number of vowels):**\n\n```python\ndef count_vowels(word):\n    return sum(1 for char in word if char.lower() in \"aeiou\")\n\nwords = [\"banana\", \"apple\", \"cherry\", \"date\"]\nsorted_words = sorted(words, key=count_vowels)\nprint(sorted_words)  # Output: ['apple', 'banana', 'cherry', 'date']\n```\n\n13. **Sorting a list of strings using a custom key (number of consonants):**\n\n```python\ndef count_consonants(word):\n    return sum(1 for char in word if char.lower() not in \"aeiou\" and char.isalpha())\n\nwords = [\"banana\", \"apple\", \"cherry\", \"date\"]\nsorted_words = sorted(words, key=count_consonants)\nprint(sorted_words)  # Output: ['apple', 'date', 'banana', 'cherry']\n```\n\n14. **Sorting a list of strings using a custom key (number of digits):**\n\n```python\ndef count_digits(word):\n    return sum(1 for char in word if char.isdigit())\n\nwords = [\"banana1\", \"apple2\", \"cherry3\", \"date4\"]\nsorted_words = sorted(words, key=count_digits)\nprint(sorted_words)  # Output: ['banana1', 'apple2', 'cherry3', 'date4']\n```\n\n15. **Sorting a list using the `list.sort()` method:**\n\n```python\nnumbers = [6, 9, 3, 1, 5]\nnumbers.sort()\nprint(numbers)  # Output: [1, 3, 5, 6, 9]\n```\n\n16. **Sorting a list in descending order using the `list.sort()` method:**\n\n```python\nnumbers = [6, 9, 3, 1, 5]\nnumbers.sort(reverse=True)\nprint(numbers)  # Output: [9, 6, 5, 3, 1]\n```\n\n17. **Sorting a list of strings in alphabetical order using the `list.sort()` method:**\n\n```python\nwords = [\"banana\", \"apple\", \"cherry\", \"date\"]\nwords.sort()\nprint(words)  # Output: ['apple', 'banana', 'cherry', 'date']\n```\n\n18. **Sorting a list of strings in reverse alphabetical order using the `list.sort()` method:**\n\n```python\nwords = [\"banana\", \"apple\", \"cherry\", \"date\"]\nwords.sort(reverse=True)\nprint(words)  # Output: ['date', 'cherry', 'banana', 'apple']\n```\n\n19. **Sorting a list of tuples by the first element using the `list.sort()` method:**\n\n```python\npoints = [(3, 7), (1, 3), (5, 2), (4, 6)]\npoints.sort(key=lambda x: x[0])\nprint(points)  # Output: [(1, 3), (2, 5), (3, 7), (4, 6)]\n```\n\n20. **Sorting a list of tuples by the second element using the `list.sort()` method:**\n\n```python\npoints = [(3, 7), (1, 3), (5, 2), (4, 6)]\npoints.sort(key=lambda x: x[1])\nprint(points)  # Output: [(5, 2), (1, 3), (3, 7), (4, 6)]\n```\n\n21. **Sorting a list of objects by a custom attribute using the `list.sort()` method:**\n\n```python\npeople = [Person(\"Alice\", 30), Person(\"Bob\", 25), Person(\"Charlie\", 35)]\npeople.sort(key=lambda x: x.age)\nprint(people)\n```\n\nThese examples demonstrate various ways to sort lists in Python, using both the `sorted()` function and the `list.sort()` method. You can choose the method that best fits your use case.", "token_count": 1786, "response_time": 56.761114500000986}}